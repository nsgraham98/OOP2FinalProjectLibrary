@page "/membership"
@using OOP2FinalProjectLibrary
@using OOP2FinalProjectLibrary.Data
@using OOP2FinalProjectLibrary.Data.Managers
@using OOP2FinalProjectLibrary.Data.Objects.Items
@using OOP2FinalProjectLibrary.Data.Objects
@inject NavigationManager navManager

<section class="container">
    <h2>Membership</h2>

    <h4>Enter Your Information</h4>

    <div class="membership">
        <form>
            <div class="flex-row">
                <label for="lastName">Last Name:</label>
                <input type="text" name="lastName" @bind="@lastName" /><br />

                <label for="firstName">First Name:</label>
                <input type="text" name="firstName" @bind="@firstName" /><br />

                <label for="memberId">Membership ID:</label>
                <input type="text" name="memberId" @bind="@memberId" /><br />

                <label for="phone">Phone:</label>
                <input type="text" name="phone" @bind="@phone" /><br />

                <label for="email">Email:</label>
                <input type="text" name="email" @bind="@email" /><br />

                <label for="address">Address:</label>
                <input type="text" name="address" @bind="@address" /><br />


                <button type="button" @onclick="SubmitForm">Add</button>
                <button type="button" @onclick="SaveEdits">Save Changes</button>
                <button type="button" @onclick="DeleteMember">Delete</button>
                <button type="button" @onclick="ClearFields">Clear</button>
            </div>
        </form>
    </div>
    <br />

    <div class="membership">
        <h4>Search for a Membership</h4>
        <form>
            <label for="lastName">Last Name:</label>
            <input type="text" name="lastName" @bind="@searchlastName" /><br />

            <label for="firstName">First Name:</label>
            <input type="text" name="firstName" @bind="@searchfirstName" /><br />

            <label for="memberId">Membership ID:</label>
            <input type="text" name="memberId" @bind="@searchmemberId" /><br />

            <button type="button" @onclick="SearchMember">Search</button>
        </form>
    </div>

    <div class="membership">
        @foreach (Member resultmem in searchMembers)
        {

            <p class="memberResults">
                <strong>Name: </strong> @resultmem.FirstName @resultmem.LastName <br />
                <strong>Membership Number: </strong> @resultmem.MemberId<br />
            </p>
            <button type="button" @onclick="() => UpdateFields(resultmem)">Select this member</button>
        }
    </div>
</section>
<style>
    /* General page styling */
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f9f9f9;
        color: #333;
    }

    .container {
        max-width: 900px;
        margin: 20px auto;
        padding: 20px;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    /* Headings */
    h2 {
        color: #444;
        text-align: center;
    }

    h4 {
        color: #555;
        margin-top: 20px;
        margin-bottom: 10px;
    }

    /* Form styling */
    form {
        margin-bottom: 20px;
    }

    label {
        font-weight: bold;
        display: block;
        margin: 10px 0 5px;
    }

    input {
        width: calc(100% - 20px);
        padding: 8px;
        font-size: 14px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    button {
        padding: 8px 12px;
        font-size: 14px;
        color: #fff;
        background-color: #007bff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        margin-right: 10px;
    }

        button:hover {
            background-color: #0056b3;
        }

        button:disabled {
            background-color: #6c757d;
            cursor: not-allowed;
        }

</style>

@code {
    string lastName;
    string firstName;
    int memberId;
    string phone;
    string email;
    string address;

    string searchlastName;
    string searchfirstName;
    int searchmemberId;

    bool alert = false;
    string incompleteFormMsg = "Please fill in all fields";
    // List<Member> Currentmembers = new List<Member>();

    List<Member> searchMembers = new List<Member>();
    static DBHandler dbHan = new DBHandler();

    // Member tempMem = new Member();

    static MemberManager memMan = new MemberManager(dbHan);

    List<Member> Currentmembers = memMan.LoadAllMembers();

    private void SubmitForm()
    {

        // check all fields are filled
        if (string.IsNullOrEmpty(lastName) || string.IsNullOrEmpty(firstName) || memberId <= 0 || string.IsNullOrEmpty(phone) || string.IsNullOrEmpty(email) || string.IsNullOrEmpty(address))
        {
            // ShowAlertForIncompleteFields();
            // await DisplayAlert("Error", "Please fill in all fields", "OK");
            return;
        }

        var newMember = new Member(memberId, lastName, firstName, phone, email, address)

            {

                MemberId = memberId,

                LastName = lastName,

                FirstName = firstName,

                Phone = phone,

                Email = email,

                Address = address,

            };

        // Add the new member object to list
        Currentmembers.Add(newMember);

        //add to the database
        memMan.AddMember(lastName, firstName, phone, email, address);
    }

    public void SaveEdits()
    {
        var mem = new Member(memberId, lastName, firstName, phone, email, address)
            {
                MemberId = memberId,

                LastName = lastName,

                FirstName = firstName,

                Phone = phone,

                Email = email,

                Address = address,

            };

        memMan.UpdateMember(mem);
    }

    public void DeleteMember()
    {
        var mem = new Member(memberId, lastName, firstName, phone, email, address)
            {
                MemberId = memberId,

                LastName = lastName,

                FirstName = firstName,

                Phone = phone,

                Email = email,

                Address = address,
            };

        memMan.DeleteMember(mem);
    }

    //search list for memeber
    public void SearchMember()
    {
        //Clear list
        searchMembers.Clear();

        //Iterate through the Currentmembers list
        foreach (var mem in Currentmembers)
        {
            bool match = false; //set to false

            // Check if any of the search parameters match ignoring casesens
            if (!string.IsNullOrEmpty(searchfirstName) && mem.FirstName.Contains(searchfirstName, StringComparison.OrdinalIgnoreCase))
            {
                match = true;
            }

            if (!string.IsNullOrEmpty(searchlastName) && mem.LastName.Contains(searchlastName, StringComparison.OrdinalIgnoreCase))
            {
                match = true;
            }

            if (searchmemberId > 0 && mem.MemberId == searchmemberId)
            {
                match = true;
            }

            // If a match is found add to list (any match will set match to true)
            if (match)
            {
                searchMembers.Add(mem);
            }
        }
    }

    private void ClearFields()
    {
        lastName = "";
        firstName = "";
        memberId = 0;
        phone = "";
        email = "";
        address = "";

        //clear search
        searchMembers.Clear();
    }

    public void UpdateFields(Member mem)// changes fields to match selected member
    {
        lastName = mem.LastName;
        firstName = mem.FirstName;
        memberId = mem.MemberId;
        phone = mem.Phone;
        email = mem.Email;
        address = mem.Address;
    }

}